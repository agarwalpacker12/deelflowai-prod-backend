[
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "e96f8b0c-52ad-46e1-a765-8581cdb34768",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC001-post properties create new property",
    "description": "Test the POST /properties/ endpoint to verify that a new property can be created successfully with all required fields, and that the response returns a 200 status with the correct property data including the calculated potential profit.",
    "code": "import requests\n\nbase_url = \"http://localhost:8140\"\nlogin_url = f\"{base_url}/api/auth/login\"\nproperties_url = f\"{base_url}/properties/\"\n\ncredentials = {\n    \"email\": \"arpansarkar@gmail.com\",\n    \"password\": \"arpan051992\"\n}\n\ndef test_post_properties_create_new_property():\n    # Authenticate first to get token\n    try:\n        login_response = requests.post(login_url, json=credentials, timeout=30)\n        assert login_response.status_code == 200, f\"Login failed with status {login_response.status_code}\"\n        login_data = login_response.json()\n        assert \"access_token\" in login_data, \"access_token not in login response\"\n        token = login_data[\"access_token\"]\n    except Exception as e:\n        raise AssertionError(f\"Authentication failed: {e}\")\n\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Prepare payload with all required fields plus some optional\n    payload = {\n        \"address\": \"123 Test Ave\",\n        \"city\": \"Testville\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"county\": \"Test County\",\n        \"property_type\": \"Single Family\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"Test property for automation\",\n        \"unit\": \"1A\",\n        \"bedrooms\": 3,\n        \"bathrooms\": 2.5,\n        \"square_feet\": 1800,\n        \"lot_size\": 0.25,\n        \"year_built\": 1995,\n        \"purchase_price\": 250000,\n        \"arv\": 300000,\n        \"repair_estimate\": 15000,\n        \"holding_costs\": 5000,\n        \"assignment_fee\": 8000,\n        \"seller_notes\": \"Motivated seller, quick close possible\"\n    }\n\n    prop_id = None\n\n    try:\n        # Create property\n        response = requests.post(properties_url, json=payload, headers=headers, timeout=30)\n        assert response.status_code == 200, f\"Property creation failed with status {response.status_code}\"\n\n        json_data = response.json()\n        assert json_data.get(\"status\") == \"success\", \"Response status not success\"\n        data = json_data.get(\"data\")\n        assert data is not None, \"Response data missing\"\n        prop_id = data.get(\"id\")\n        assert isinstance(prop_id, int), \"Property ID is missing or not integer\"\n        assert data.get(\"address\") == payload[\"address\"], \"Address in response does not match\"\n\n        potential_profit = data.get(\"potential_profit\")\n        assert potential_profit is not None, \"potential_profit field missing in response\"\n        assert isinstance(potential_profit, (int, float)), \"potential_profit is not a number\"\n        # Optionally check potential_profit calculation is reasonable (arv - purchase_price - repair_estimate - holding_costs - assignment_fee)\n        expected_profit = (\n            payload[\"arv\"]\n            - payload[\"purchase_price\"]\n            - payload[\"repair_estimate\"]\n            - payload[\"holding_costs\"]\n            - payload[\"assignment_fee\"]\n        )\n        # Allow a small delta for floating point\n        assert abs(potential_profit - expected_profit) < 1e-2, f\"potential_profit incorrect: expected {expected_profit}, got {potential_profit}\"\n\n    finally:\n        # Cleanup: delete the created property\n        if prop_id is not None:\n            try:\n                delete_response = requests.delete(f\"{properties_url}{prop_id}/\", headers=headers, timeout=30)\n                assert delete_response.status_code == 200, f\"Failed to delete property with id {prop_id}\"\n            except Exception:\n                pass  # Ignore cleanup errors\n\ntest_post_properties_create_new_property()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 18, in test_post_properties_create_new_property\nAssertionError: access_token not in login response\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 90, in <module>\n  File \"<string>\", line 21, in test_post_properties_create_new_property\nAssertionError: Authentication failed: access_token not in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.040Z",
    "modified": "2025-10-10T04:13:11.711Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "7d66b0ef-1b59-4c4d-9006-c961601a70c9",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC002-get properties retrieve all properties",
    "description": "Test the GET /properties/ endpoint to ensure it returns a list of all properties with correct data fields and a 200 status code.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nAUTH_CREDENTIALS = {\n    \"username\": \"arpansarkar@gmail.com\",\n    \"password\": \"arpan051992\"\n}\nTIMEOUT = 30\n\ndef get_basic_auth_token():\n    # For this test, use POST /api/auth/login to get access token via email/password\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\n        \"email\": AUTH_CREDENTIALS[\"username\"],\n        \"password\": AUTH_CREDENTIALS[\"password\"]\n    }\n    try:\n        resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        resp.raise_for_status()\n        token_data = resp.json()\n        assert \"access_token\" in token_data, \"access_token missing in login response\"\n        assert \"refresh_token\" in token_data, \"refresh_token missing in login response\"\n        return token_data[\"access_token\"]\n    except Exception as e:\n        raise RuntimeError(f\"Failed to get auth token: {e}\")\n\ndef test_get_properties_retrieve_all_properties():\n    access_token = get_basic_auth_token()\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n\n    url = f\"{BASE_URL}/properties/\"\n\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except Exception as e:\n        raise RuntimeError(f\"GET /properties/ request failed: {e}\")\n\n    try:\n        response.raise_for_status()\n    except Exception as e:\n        raise AssertionError(f\"GET /properties/ returned error status code {response.status_code}: {e}\")\n\n    try:\n        resp_json = response.json()\n    except Exception as e:\n        raise AssertionError(f\"Response is not valid JSON: {e}\")\n\n    # Validate top-level keys\n    assert isinstance(resp_json, dict), \"Response JSON is not an object\"\n    assert \"status\" in resp_json, \"'status' field missing in response\"\n    assert \"data\" in resp_json, \"'data' field missing in response\"\n    assert resp_json[\"status\"] == \"success\" or resp_json[\"status\"] == \"ok\", \"Unexpected status value\"\n\n    data = resp_json[\"data\"]\n    assert isinstance(data, list), \"'data' field is not a list\"\n\n    # Check at least one property or just verify all fields if list empty\n    for prop in data:\n        assert isinstance(prop, dict), \"Property entry is not an object\"\n        # Required fields according to schema\n        expected_fields = [\n            \"id\",\n            \"address\",\n            \"city\",\n            \"state\",\n            \"zip\",\n            \"property_type\",\n            \"bedrooms\",\n            \"bathrooms\",\n            \"square_feet\",\n            \"purchase_price\",\n            \"arv\",\n            \"potential_profit\"\n        ]\n        for field in expected_fields:\n            assert field in prop, f\"Field '{field}' missing in property\"\n        # Validate types\n        assert isinstance(prop[\"id\"], int), \"'id' should be int\"\n        assert isinstance(prop[\"address\"], str), \"'address' should be str\"\n        assert isinstance(prop[\"city\"], str), \"'city' should be str\"\n        assert isinstance(prop[\"state\"], str), \"'state' should be str\"\n        assert isinstance(prop[\"zip\"], str), \"'zip' should be str\"\n        assert isinstance(prop[\"property_type\"], str), \"'property_type' should be str\"\n        assert isinstance(prop[\"bedrooms\"], int), \"'bedrooms' should be int\"\n        assert isinstance(prop[\"bathrooms\"], (int, float)), \"'bathrooms' should be number\"\n        assert isinstance(prop[\"square_feet\"], int), \"'square_feet' should be int\"\n        assert isinstance(prop[\"purchase_price\"], (int, float)), \"'purchase_price' should be number\"\n        assert isinstance(prop[\"arv\"], (int, float)), \"'arv' should be number\"\n        # potential_profit must be a number (int or float)\n        assert isinstance(prop[\"potential_profit\"], (int, float)), \"'potential_profit' should be number\"\n\ntest_get_properties_retrieve_all_properties()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 21, in get_basic_auth_token\nAssertionError: access_token missing in login response\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 92, in <module>\n  File \"<string>\", line 28, in test_get_properties_retrieve_all_properties\n  File \"<string>\", line 25, in get_basic_auth_token\nRuntimeError: Failed to get auth token: access_token missing in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.046Z",
    "modified": "2025-10-10T04:12:57.602Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "9fc2d0fe-1e62-4cbd-a64d-68af93b49cec",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC003-get properties property id retrieve property details",
    "description": "Test the GET /properties/{property_id}/ endpoint to verify retrieval of a specific property by its ID, returning detailed property information with a 200 status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nUSERNAME = \"arpansarkar@gmail.com\"\nPASSWORD = \"arpan051992\"\nTIMEOUT = 30\n\ndef test_get_property_by_id_retrieve_property_details():\n    # Login to get token\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\"email\": USERNAME, \"password\": PASSWORD}\n    login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n    assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n    login_data = login_resp.json()\n    assert \"access_token\" in login_data, \"access_token missing in login response\"\n    assert \"refresh_token\" in login_data, \"refresh_token missing in login response\"\n    access_token = login_data[\"access_token\"]\n\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n\n    # Create a new property to get its ID for testing\n    property_create_url = f\"{BASE_URL}/properties/\"\n    new_property_payload = {\n        \"address\": \"123 Test St\",\n        \"city\": \"Testville\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"county\": \"Test County\",\n        \"property_type\": \"Single Family\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"A test property for API testing.\"\n    }\n    new_property_resp = requests.post(property_create_url, json=new_property_payload, headers=headers, timeout=TIMEOUT)\n    assert new_property_resp.status_code == 200, f\"Property creation failed: {new_property_resp.text}\"\n    new_property_data = new_property_resp.json()\n    prop_id = new_property_data.get(\"data\", {}).get(\"id\")\n    assert isinstance(prop_id, int), \"Created property ID not found or invalid\"\n\n    try:\n        # Test GET /properties/{property_id}/ endpoint\n        get_property_url = f\"{BASE_URL}/properties/{prop_id}/\"\n        get_resp = requests.get(get_property_url, headers=headers, timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"GET property by ID failed: {get_resp.text}\"\n        get_data = get_resp.json()\n        assert get_data.get(\"status\") == \"success\" or get_data.get(\"status\") == \"ok\" or isinstance(get_data.get(\"status\"), str), \"Missing or invalid status field\"\n        property_info = get_data.get(\"data\")\n        assert isinstance(property_info, dict), \"Property data should be an object\"\n        assert property_info.get(\"id\") == prop_id, \"Property ID in response does not match requested ID\"\n        # Optional checks for fields presence\n        assert \"address\" in property_info, \"address field missing in property data\"\n        assert \"city\" in property_info, \"city field missing in property data\"\n        assert \"state\" in property_info, \"state field missing in property data\"\n        assert \"zip\" in property_info, \"zip field missing in property data\"\n        assert \"property_type\" in property_info, \"property_type field missing in property data\"\n    finally:\n        # Clean up: delete the created property\n        delete_url = f\"{BASE_URL}/properties/{prop_id}/\"\n        del_resp = requests.delete(delete_url, headers=headers, timeout=TIMEOUT)\n        assert del_resp.status_code == 200, f\"Property deletion failed: {del_resp.text}\"\n\ntest_get_property_by_id_retrieve_property_details()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 61, in <module>\n  File \"<string>\", line 15, in test_get_property_by_id_retrieve_property_details\nAssertionError: access_token missing in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.052Z",
    "modified": "2025-10-10T04:12:54.808Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "2f6254c3-1f17-4af1-a7cd-5249aca56ce1",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC004-put properties property id update property",
    "description": "Test the PUT /properties/{property_id}/ endpoint to update existing property details such as address, city, and state, and confirm the update is successful with a 200 status response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nAUTH_CREDENTIALS = {\n    \"username\": \"arpansarkar@gmail.com\",\n    \"password\": \"arpan051992\"\n}\nTIMEOUT = 30\n\ndef test_tc004_put_properties_property_id_update_property():\n    # 1. User Login to get access token\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\n        \"email\": AUTH_CREDENTIALS[\"username\"],\n        \"password\": AUTH_CREDENTIALS[\"password\"]\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        login_data = login_resp.json()\n        # The tokens are at root level\n        access_token = login_data.get(\"access_token\")\n        refresh_token = login_data.get(\"refresh_token\")\n        assert access_token and refresh_token, \"Access or refresh token missing in login response\"\n    except Exception as e:\n        raise AssertionError(f\"Login API call failed: {e}\")\n\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    # 2. Create a property to update (since no property_id provided)\n    create_url = f\"{BASE_URL}/properties/\"\n    create_payload = {\n        \"address\": \"123 Original St\",\n        \"city\": \"Oldtown\",\n        \"state\": \"OS\",\n        \"zip\": \"12345\",\n        \"county\": \"Oldcounty\",\n        \"property_type\": \"Single Family\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"Original property description\"\n    }\n    property_id = None\n    try:\n        create_resp = requests.post(create_url, json=create_payload, headers=headers, timeout=TIMEOUT)\n        assert create_resp.status_code == 200, f\"Property creation failed with status {create_resp.status_code}\"\n        create_data = create_resp.json()\n        property_id = create_data.get(\"data\", {}).get(\"id\")\n        assert property_id is not None, \"Created property ID is missing\"\n        \n        # 3. Update property details with PUT /properties/{property_id}/\n        update_url = f\"{BASE_URL}/properties/{property_id}/\"\n        update_payload = {\n            \"address\": \"456 Updated Ave\",\n            \"city\": \"Newcity\",\n            \"state\": \"NS\"\n        }\n        update_resp = requests.put(update_url, json=update_payload, headers=headers, timeout=TIMEOUT)\n        assert update_resp.status_code == 200, f\"Property update failed with status {update_resp.status_code}\"\n\n        # 4. Retrieve the updated property with GET /properties/{property_id}/ to verify changes\n        get_url = update_url\n        get_resp = requests.get(get_url, headers=headers, timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Get property failed with status {get_resp.status_code}\"\n        get_data = get_resp.json()\n        updated_property = get_data.get(\"data\", {})\n        assert updated_property.get(\"address\") == update_payload[\"address\"], \"Address was not updated correctly\"\n        assert updated_property.get(\"city\") == update_payload[\"city\"], \"City was not updated correctly\"\n        assert updated_property.get(\"state\") == update_payload[\"state\"], \"State was not updated correctly\"\n\n        # 5. Test GET /properties/ to check if potential_profit field exists in the property list\n        list_url = f\"{BASE_URL}/properties/\"\n        list_resp = requests.get(list_url, headers=headers, timeout=TIMEOUT)\n        assert list_resp.status_code == 200, f\"Property list failed with status {list_resp.status_code}\"\n        list_data = list_resp.json()\n        properties = list_data.get(\"data\", [])\n        # Find our property in the list:\n        found_prop = None\n        for prop in properties:\n            if prop.get(\"id\") == property_id:\n                found_prop = prop\n                break\n        assert found_prop is not None, \"Updated property not found in property list\"\n        assert \"potential_profit\" in found_prop, \"'potential_profit' field missing in property list\"\n\n        # 6. Test dashboard endpoints that previously showed 405 to confirm 200 responses\n\n        # GET /stats\n        stats_url = f\"{BASE_URL}/stats\"\n        stats_resp = requests.get(stats_url, headers=headers, timeout=TIMEOUT)\n        assert stats_resp.status_code == 200, f\"Dashboard stats failed with status {stats_resp.status_code}\"\n        stats_data = stats_resp.json()\n        assert \"data\" in stats_data, \"Dashboard stats response missing data field\"\n\n        # GET /total-revenue/\n        revenue_url = f\"{BASE_URL}/total-revenue/\"\n        revenue_resp = requests.get(revenue_url, headers=headers, timeout=TIMEOUT)\n        assert revenue_resp.status_code == 200, f\"Total revenue failed with status {revenue_resp.status_code}\"\n        revenue_data = revenue_resp.json()\n        assert \"data\" in revenue_data, \"Total revenue response missing data field\"\n\n    finally:\n        # Clean up: Delete the created property if it exists\n        if property_id is not None:\n            delete_url = f\"{BASE_URL}/properties/{property_id}/\"\n            try:\n                del_resp = requests.delete(delete_url, headers=headers, timeout=TIMEOUT)\n                assert del_resp.status_code == 200, f\"Failed to delete property with id {property_id}\"\n            except Exception as e:\n                raise AssertionError(f\"Cleanup delete property failed: {e}\")\n\ntest_tc004_put_properties_property_id_update_property()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 24, in test_tc004_put_properties_property_id_update_property\nAssertionError: Access or refresh token missing in login response\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 114, in <module>\n  File \"<string>\", line 26, in test_tc004_put_properties_property_id_update_property\nAssertionError: Login API call failed: Access or refresh token missing in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.058Z",
    "modified": "2025-10-10T04:12:53.434Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "b9a0440d-c6bd-4e1f-9218-07f6af4744a4",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC005-delete properties property id delete property",
    "description": "Test the DELETE /properties/{property_id}/ endpoint to ensure a property can be deleted by its ID and that the API returns a 200 status confirming deletion.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nAUTH_CREDENTIALS = {\n    \"username\": \"arpansarkar@gmail.com\",\n    \"password\": \"arpan051992\"\n}\n\n\ndef get_auth_token():\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\n        \"email\": AUTH_CREDENTIALS[\"username\"],\n        \"password\": AUTH_CREDENTIALS[\"password\"]\n    }\n    try:\n        response = requests.post(login_url, json=login_payload, timeout=30)\n        response.raise_for_status()\n        data = response.json()\n        access_token = data.get(\"access_token\")\n        refresh_token = data.get(\"refresh_token\")\n        assert access_token, \"access_token not found in login response\"\n        assert refresh_token, \"refresh_token not found in login response\"\n        return access_token\n    except Exception as e:\n        raise RuntimeError(f\"Authentication failed: {e}\")\n\n\ndef create_property(headers):\n    url = f\"{BASE_URL}/properties/\"\n    payload = {\n        \"address\": \"1234 Delete Test St\",\n        \"city\": \"Testville\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"county\": \"Test County\",\n        \"property_type\": \"Single Family\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"Property created for delete test\",\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=30)\n        response.raise_for_status()\n        resp_json = response.json()\n        property_id = resp_json.get(\"data\", {}).get(\"id\")\n        assert property_id is not None, \"Property ID not returned after creation\"\n        return property_id\n    except Exception as e:\n        raise RuntimeError(f\"Property creation failed: {e}\")\n\n\ndef delete_property_test():\n    token = get_auth_token()\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    property_id = None\n    try:\n        # Create property so we have a property to delete\n        property_id = create_property(headers)\n\n        # DELETE /properties/{property_id}/ endpoint\n        delete_url = f\"{BASE_URL}/properties/{property_id}/\"\n        delete_resp = requests.delete(delete_url, headers=headers, timeout=30)\n        assert delete_resp.status_code == 200, f\"Expected status code 200 but got {delete_resp.status_code}\"\n\n        # Optionally verify the property no longer exists by GET; should return 404 or not found status\n        get_url = f\"{BASE_URL}/properties/{property_id}/\"\n        get_resp = requests.get(get_url, headers=headers, timeout=30)\n        assert get_resp.status_code == 404 or get_resp.status_code == 400, \"Deleted property still accessible\"\n\n        # Additional checks: Verify GET /properties/ includes 'potential_profit' field in list items\n        list_url = f\"{BASE_URL}/properties/\"\n        list_resp = requests.get(list_url, headers=headers, timeout=30)\n        assert list_resp.status_code == 200, f\"Failed to get properties list, status {list_resp.status_code}\"\n        list_data = list_resp.json().get(\"data\", [])\n        if list_data:\n            sample_property = list_data[0]\n            assert \"potential_profit\" in sample_property, \"'potential_profit' field not found in properties list\"\n\n        # Additional: Test the PUT /properties/{id}/ endpoint update and confirm update\n        # Create a property for update test\n        up_property_id = create_property(headers)\n        try:\n            update_url = f\"{BASE_URL}/properties/{up_property_id}/\"\n            update_payload = {\n                \"address\": \"Updated Address\",\n                \"city\": \"Updated City\",\n                \"state\": \"UP\"\n            }\n            put_resp = requests.put(update_url, json=update_payload, headers=headers, timeout=30)\n            assert put_resp.status_code == 200, f\"PUT update failed with status {put_resp.status_code}\"\n\n            get_after_update_resp = requests.get(update_url, headers=headers, timeout=30)\n            assert get_after_update_resp.status_code == 200, f\"GET after update failed with status {get_after_update_resp.status_code}\"\n            get_data = get_after_update_resp.json().get(\"data\", {})\n            assert get_data.get(\"address\") == update_payload[\"address\"], \"Address not updated correctly\"\n            assert get_data.get(\"city\") == update_payload[\"city\"], \"City not updated correctly\"\n            assert get_data.get(\"state\") == update_payload[\"state\"], \"State not updated correctly\"\n        finally:\n            # Clean up update test property\n            requests.delete(f\"{BASE_URL}/properties/{up_property_id}/\", headers=headers, timeout=30)\n\n        # Additional: Test User Login endpoint returns access_token and refresh_token at root\n        login_url = f\"{BASE_URL}/api/auth/login\"\n        login_payload = {\n            \"email\": AUTH_CREDENTIALS[\"username\"],\n            \"password\": AUTH_CREDENTIALS[\"password\"]\n        }\n        login_resp = requests.post(login_url, json=login_payload, timeout=30)\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        login_json = login_resp.json()\n        assert \"access_token\" in login_json, \"'access_token' not found in login response\"\n        assert \"refresh_token\" in login_json, \"'refresh_token' not found in login response\"\n\n        # Additional: Test dashboard endpoints to ensure no 405 error and status 200\n\n        dashboard_endpoints = [\n            \"/stats\",\n            \"/total-revenue/\"\n        ]\n\n        for endpoint in dashboard_endpoints:\n            url = f\"{BASE_URL}{endpoint}\"\n            resp = requests.get(url, headers=headers, timeout=30)\n            assert resp.status_code == 200, f\"Dashboard endpoint {endpoint} returned status {resp.status_code}\"\n    finally:\n        if property_id is not None:\n            # Cleanup property created for delete test if it still exists\n            requests.delete(f\"{BASE_URL}/properties/{property_id}/\", headers=headers, timeout=30)\n\n\ndelete_property_test()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 22, in get_auth_token\nAssertionError: access_token not found in login response\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 134, in <module>\n  File \"<string>\", line 53, in delete_property_test\n  File \"<string>\", line 26, in get_auth_token\nRuntimeError: Authentication failed: access_token not found in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.064Z",
    "modified": "2025-10-10T04:12:57.607Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "bcdc22e1-f9d1-46d4-96d4-e22c5b534192",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC006-get properties property id ai analysis",
    "description": "Test the GET /properties/{property_id}/ai-analysis/ endpoint to retrieve AI analysis results for a specific property, verifying the response includes analysis type, confidence score, recommended price, and other relevant data with a 200 status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nUSERNAME = \"arpansarkar@gmail.com\"\nPASSWORD = \"arpan051992\"\nTIMEOUT = 30\n\n\ndef test_get_properties_property_id_ai_analysis():\n    # Login to get token\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\n        \"email\": USERNAME,\n        \"password\": PASSWORD\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        login_resp.raise_for_status()\n    except Exception as e:\n        assert False, f\"Login request failed: {e}\"\n    login_data = login_resp.json()\n    assert \"access_token\" in login_data and \"refresh_token\" in login_data, \"Tokens not found in login response\"\n\n    access_token = login_data[\"access_token\"]\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n\n    # Create a property to test AI analysis endpoint\n    create_url = f\"{BASE_URL}/properties/\"\n    new_property_payload = {\n        \"address\": \"123 AI Tester St\",\n        \"city\": \"Testville\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"county\": \"Test County\",\n        \"property_type\": \"Single Family\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"Property created for AI analysis test\"\n    }\n    prop_id = None\n\n    try:\n        create_resp = requests.post(create_url, json=new_property_payload, headers=headers, timeout=TIMEOUT)\n        create_resp.raise_for_status()\n        create_data = create_resp.json()\n        assert create_data.get(\"status\") == \"success\" or create_data.get(\"status\") == \"ok\" or \"data\" in create_data, \"Unexpected create response status\"\n        prop_id = create_data.get(\"data\", {}).get(\"id\")\n        assert isinstance(prop_id, int), \"Property ID not found or invalid in create response\"\n\n        # Call GET /properties/{property_id}/ai-analysis/\n        ai_analysis_url = f\"{BASE_URL}/properties/{prop_id}/ai-analysis/\"\n        ai_resp = requests.get(ai_analysis_url, headers=headers, timeout=TIMEOUT)\n        ai_resp.raise_for_status()\n\n        ai_data = ai_resp.json()\n        assert ai_data.get(\"status\") == \"success\" or ai_data.get(\"status\") == \"ok\", \"AI analysis status not success\"\n\n        data = ai_data.get(\"data\")\n        assert data is not None and isinstance(data, dict), \"AI analysis data missing or invalid\"\n\n        # Check required fields in the AI analysis data\n        expected_fields = [\"analysis_type\", \"confidence_score\", \"recommended_price\", \"market_analysis\", \"risk_assessment\", \"recommendations\"]\n        for field in expected_fields:\n            assert field in data, f\"Field '{field}' missing in AI analysis data\"\n\n        # Validate field types\n        assert isinstance(data[\"analysis_type\"], str), \"analysis_type should be string\"\n        assert isinstance(data[\"confidence_score\"], (float, int)), \"confidence_score should be numeric\"\n        assert isinstance(data[\"recommended_price\"], (float, int)), \"recommended_price should be numeric\"\n        assert isinstance(data[\"market_analysis\"], dict), \"market_analysis should be object\"\n        assert isinstance(data[\"risk_assessment\"], dict), \"risk_assessment should be object\"\n        assert isinstance(data[\"recommendations\"], list), \"recommendations should be a list\"\n        for rec in data[\"recommendations\"]:\n            assert isinstance(rec, str), \"each recommendation should be string\"\n\n    finally:\n        # Cleanup - delete the created property\n        if prop_id is not None:\n            try:\n                del_url = f\"{BASE_URL}/properties/{prop_id}/\"\n                del_resp = requests.delete(del_url, headers=headers, timeout=TIMEOUT)\n                del_resp.raise_for_status()\n                del_data = del_resp.json()\n                assert del_data.get(\"status\") == \"success\" or del_data.get(\"status\") == \"ok\", \"Delete property status not success\"\n            except Exception:\n                pass\n\n\ntest_get_properties_property_id_ai_analysis()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 88, in <module>\n  File \"<string>\", line 22, in test_get_properties_property_id_ai_analysis\nAssertionError: Tokens not found in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.070Z",
    "modified": "2025-10-10T04:12:53.457Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "35937b8a-3c7d-4619-9cfd-579fc314b038",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC007-post api auth login user login",
    "description": "Test the POST /api/auth/login endpoint to verify user login functionality with valid credentials, ensuring the response includes access and refresh tokens and a 200 status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nTIMEOUT = 30\nLOGIN_ENDPOINT = \"/api/auth/login\"\nPROPERTIES_ENDPOINT = \"/properties/\"\nDASHBOARD_STATS_ENDPOINT = \"/stats\"\nTOTAL_REVENUE_ENDPOINT = \"/total-revenue/\"\n\nUSERNAME = \"arpansarkar@gmail.com\"\nPASSWORD = \"arpan051992\"\n\n\ndef test_post_api_auth_login_user_login():\n    # Test User Login Endpoint\n    login_url = BASE_URL + LOGIN_ENDPOINT\n    login_payload = {\n        \"email\": USERNAME,\n        \"password\": PASSWORD\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    try:\n        login_response = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_response.status_code == 200, f\"Expected 200 but got {login_response.status_code}\"\n\n        login_json = login_response.json()\n        # The access_token and refresh_token should be at root level of the response JSON\n        assert \"access_token\" in login_json, \"access_token missing in login response\"\n        assert \"refresh_token\" in login_json, \"refresh_token missing in login response\"\n\n        access_token = login_json[\"access_token\"]\n        refresh_token = login_json[\"refresh_token\"]\n        token_type = login_json.get(\"token_type\", \"\")\n        assert isinstance(access_token, str) and access_token, \"Invalid access_token\"\n        assert isinstance(refresh_token, str) and refresh_token, \"Invalid refresh_token\"\n        assert isinstance(token_type, str) and token_type, \"Invalid token_type\"\n\n    except requests.RequestException as e:\n        assert False, f\"RequestException during login: {str(e)}\"\n\n    # Test GET /properties/ and ensure it includes potential_profit field\n    properties_url = BASE_URL + PROPERTIES_ENDPOINT\n    try:\n        props_response = requests.get(properties_url, timeout=TIMEOUT)\n        assert props_response.status_code == 200, f\"Expected 200 but got {props_response.status_code}\"\n        props_json = props_response.json()\n        assert \"data\" in props_json and isinstance(props_json[\"data\"], list), \"Invalid properties data structure\"\n        if len(props_json[\"data\"]) > 0:\n            # Check that 'potential_profit' field exists in at least one property item\n            assert \"potential_profit\" in props_json[\"data\"][0], \"'potential_profit' field missing in property item\"\n    except requests.RequestException as e:\n        assert False, f\"RequestException during GET properties: {str(e)}\"\n\n    # Test PUT /properties/{id}/ updates property and GET reflects update\n    # Create a new property first to update\n    create_payload = {\n        \"address\": \"123 Test St\",\n        \"city\": \"Testville\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"county\": \"Test County\",\n        \"property_type\": \"Single Family\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"Test property for update\"\n    }\n    property_id = None\n    try:\n        create_resp = requests.post(properties_url, json=create_payload, timeout=TIMEOUT)\n        assert create_resp.status_code == 200, f\"Property creation failed with status {create_resp.status_code}\"\n        create_json = create_resp.json()\n        assert \"data\" in create_json and \"id\" in create_json[\"data\"], \"Property creation response missing id\"\n        property_id = create_json[\"data\"][\"id\"]\n\n        # Update property\n        update_payload = {\n            \"address\": \"456 Updated Ave\",\n            \"city\": \"Update City\",\n            \"state\": \"UP\"\n        }\n        update_url = f\"{properties_url}{property_id}/\"\n        update_resp = requests.put(update_url, json=update_payload, timeout=TIMEOUT)\n        assert update_resp.status_code == 200, f\"Property update failed with status {update_resp.status_code}\"\n\n        # GET property and verify updates\n        get_resp = requests.get(update_url, timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Property get after update failed with status {get_resp.status_code}\"\n        get_json = get_resp.json()\n        data = get_json.get(\"data\", {})\n        assert data.get(\"address\") == update_payload[\"address\"], \"Address did not update correctly\"\n        assert data.get(\"city\") == update_payload[\"city\"], \"City did not update correctly\"\n        assert data.get(\"state\") == update_payload[\"state\"], \"State did not update correctly\"\n\n    except requests.RequestException as e:\n        assert False, f\"RequestException during property create/update/get: {str(e)}\"\n    finally:\n        # Cleanup: delete created property if exists\n        if property_id:\n            try:\n                del_resp = requests.delete(f\"{properties_url}{property_id}/\", timeout=TIMEOUT)\n                assert del_resp.status_code == 200, f\"Failed to delete property with id {property_id}\"\n            except requests.RequestException as e:\n                # Log deletion failed but do not fail test due to cleanup\n                pass\n\n    # Test dashboard endpoints that were showing 405 errors to ensure they still work\n    try:\n        stats_url = BASE_URL + DASHBOARD_STATS_ENDPOINT\n        stats_resp = requests.get(stats_url, timeout=TIMEOUT)\n        assert stats_resp.status_code == 200, f\"Dashboard /stats endpoint failed with {stats_resp.status_code}\"\n        stats_json = stats_resp.json()\n        assert \"data\" in stats_json, \"No data in /stats response\"\n\n        total_revenue_url = BASE_URL + TOTAL_REVENUE_ENDPOINT\n        revenue_resp = requests.get(total_revenue_url, timeout=TIMEOUT)\n        assert revenue_resp.status_code == 200, f\"Dashboard /total-revenue/ endpoint failed with {revenue_resp.status_code}\"\n        revenue_json = revenue_resp.json()\n        assert \"data\" in revenue_json, \"No data in /total-revenue/ response\"\n\n    except requests.RequestException as e:\n        assert False, f\"RequestException during dashboard endpoint tests: {str(e)}\"\n\n\ntest_post_api_auth_login_user_login()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 125, in <module>\n  File \"<string>\", line 30, in test_post_api_auth_login_user_login\nAssertionError: access_token missing in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.077Z",
    "modified": "2025-10-10T04:12:59.054Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "c7936afb-b88d-4c52-8c74-25c1dde95316",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC008-post api auth register user registration",
    "description": "Test the POST /api/auth/register endpoint to verify user registration with valid user details, ensuring successful registration returns a 200 status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nREGISTER_ENDPOINT = f\"{BASE_URL}/api/auth/register\"\nTIMEOUT = 30\n\n\ndef test_post_api_auth_register_user_registration():\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"first_name\": \"Arpan\",\n        \"last_name\": \"Sarkar\",\n        \"organization_name\": \"Arpan Org\",\n        \"phone\": \"1234567890\",\n        \"email\": \"arpan.sarkar.test+unique@example.com\",\n        \"password\": \"StrongPass!123\"\n    }\n\n    try:\n        response = requests.post(REGISTER_ENDPOINT, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to register user failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    # Further checks: response should indicate success\n    try:\n        json_resp = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # As per PRD, no specific schema given except 200 returns \"Registration successful\"\n    # So check if response body contains this or at least a success indication\n    success_str = \"Registration successful\"\n    response_text = response.text.lower()\n    assert success_str.lower() in response_text or response.ok, \"Registration not reported successful\"\n\n\ntest_post_api_auth_register_user_registration()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.083Z",
    "modified": "2025-10-10T04:12:56.247Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "9769f9e6-ddb7-4807-a2f4-9b502a3b606d",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC009-get stats get dashboard statistics",
    "description": "Test the GET /stats endpoint to retrieve dashboard statistics including total revenue, active users, properties listed, and total deals, verifying the response data and 200 status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nAUTH_CREDENTIALS = {\n    \"username\": \"arpansarkar@gmail.com\",\n    \"password\": \"arpan051992\"\n}\n\n\ndef test_tc009_get_stats_dashboard_statistics():\n    # Authenticate to get token\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\n        \"email\": AUTH_CREDENTIALS[\"username\"],\n        \"password\": AUTH_CREDENTIALS[\"password\"]\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=30)\n        login_resp.raise_for_status()\n    except Exception as e:\n        assert False, f\"Login failed with error: {e}\"\n\n    login_data = login_resp.json()\n    # Validate that tokens are at root level\n    assert \"access_token\" in login_data, \"access_token not found in login response\"\n    assert \"refresh_token\" in login_data, \"refresh_token not found in login response\"\n    access_token = login_data[\"access_token\"]\n\n    headers = {\"Authorization\": f\"Bearer {access_token}\"}\n\n    # 1) Verify GET /properties/ includes potential_profit field\n    properties_url = f\"{BASE_URL}/properties/\"\n    try:\n        resp = requests.get(properties_url, headers=headers, timeout=30)\n        resp.raise_for_status()\n    except Exception as e:\n        assert False, f\"GET /properties/ failed with error: {e}\"\n\n    resp_json = resp.json()\n    assert resp.status_code == 200, f\"Expected 200 but got {resp.status_code} for GET /properties/\"\n    assert isinstance(resp_json, dict), \"/properties/ response is not a dict\"\n    assert \"data\" in resp_json, \"/properties/ response missing 'data' field\"\n    assert isinstance(resp_json[\"data\"], list), \"'data' field in /properties/ is not a list\"\n    if len(resp_json[\"data\"]) > 0:\n        first_property = resp_json[\"data\"][0]\n        assert \"potential_profit\" in first_property, \"'potential_profit' field not found in property item\"\n\n    # 2) Verify PUT /properties/{id}/ and then get to confirm update\n\n    # Create a property to update\n    new_property_payload = {\n        \"address\": \"123 Test St\",\n        \"city\": \"Testville\",\n        \"state\": \"TS\",\n        \"zip\": \"12345\",\n        \"county\": \"Test County\",\n        \"property_type\": \"Residential\",\n        \"transaction_type\": \"Sale\",\n        \"description\": \"Test description\"\n    }\n    try:\n        create_resp = requests.post(properties_url, headers=headers, json=new_property_payload, timeout=30)\n        create_resp.raise_for_status()\n    except Exception as e:\n        assert False, f\"POST /properties/ creation failed with error: {e}\"\n\n    create_json = create_resp.json()\n    property_id = create_json.get(\"data\", {}).get(\"id\")\n    assert property_id is not None, \"Failed to create a property for update test\"\n\n    updated_address = \"456 Updated Ave\"\n    updated_city = \"Update City\"\n    updated_state = \"UP\"\n\n    update_url = f\"{BASE_URL}/properties/{property_id}/\"\n    update_payload = {\n        \"address\": updated_address,\n        \"city\": updated_city,\n        \"state\": updated_state\n    }\n    try:\n        update_resp = requests.put(update_url, headers=headers, json=update_payload, timeout=30)\n        update_resp.raise_for_status()\n    except Exception as e:\n        # Clean up created property before failing\n        requests.delete(update_url, headers=headers, timeout=30)\n        assert False, f\"PUT /properties/{property_id}/ failed with error: {e}\"\n\n    assert update_resp.status_code == 200, f\"PUT update did not return 200 but {update_resp.status_code}\"\n\n    # Retrieve property to confirm update\n    try:\n        get_resp = requests.get(update_url, headers=headers, timeout=30)\n        get_resp.raise_for_status()\n    except Exception as e:\n        # Clean up created property before failing\n        requests.delete(update_url, headers=headers, timeout=30)\n        assert False, f\"GET /properties/{property_id}/ failed after update with error: {e}\"\n\n    prop_data = get_resp.json().get(\"data\")\n    assert prop_data is not None, \"Property data missing after update\"\n    assert prop_data.get(\"address\") == updated_address, \"Address not updated correctly\"\n    assert prop_data.get(\"city\") == updated_city, \"City not updated correctly\"\n    assert prop_data.get(\"state\") == updated_state, \"State not updated correctly\"\n\n    # 3) Verify POST /api/auth/login returns tokens at root level: already validated above.\n\n    # 4) Test the GET /stats dashboard endpoint that was previously 405\n\n    stats_url = f\"{BASE_URL}/stats\"\n    try:\n        stats_resp = requests.get(stats_url, headers=headers, timeout=30)\n        stats_resp.raise_for_status()\n    except Exception as e:\n        # Clean up created property before failing\n        requests.delete(update_url, headers=headers, timeout=30)\n        assert False, f\"GET /stats failed with error: {e}\"\n\n    assert stats_resp.status_code == 200, f\"Expected 200 but got {stats_resp.status_code} for GET /stats\"\n\n    stats_json = stats_resp.json()\n    assert \"data\" in stats_json, \"/stats response missing 'data' field\"\n    stats_data = stats_json[\"data\"]\n    expected_fields = {\"total_revenue\", \"active_users\", \"properties_listed\", \"total_deals\"}\n    missing_fields = expected_fields - stats_data.keys()\n    assert not missing_fields, f\"/stats response missing fields: {missing_fields}\"\n\n    # Cleanup created property\n    try:\n        del_resp = requests.delete(update_url, headers=headers, timeout=30)\n        del_resp.raise_for_status()\n    except Exception as e:\n        assert False, f\"Cleanup failed for property {property_id} with error: {e}\"\n\n\ntest_tc009_get_stats_dashboard_statistics()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 136, in <module>\n  File \"<string>\", line 25, in test_tc009_get_stats_dashboard_statistics\nAssertionError: access_token not found in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.098Z",
    "modified": "2025-10-10T04:13:01.580Z"
  },
  {
    "projectId": "af44a59f-0a05-462e-8991-88dcf975edba",
    "testId": "69eddcfa-07e9-4b0a-9e98-9301e387f4fe",
    "userId": "9458e458-a051-70e2-d8d5-814f9842b0da",
    "title": "TC010-get total revenue get total revenue metrics",
    "description": "Test the GET /total-revenue/ endpoint to verify retrieval of total revenue metrics and change percentage, ensuring the response includes correct data and a 200 status.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8140\"\nLOGIN_ENDPOINT = f\"{BASE_URL}/api/auth/login\"\nTOTAL_REVENUE_ENDPOINT = f\"{BASE_URL}/total-revenue/\"\n\nUSERNAME = \"arpansarkar@gmail.com\"\nPASSWORD = \"arpan051992\"\nTIMEOUT = 30\n\ndef test_get_total_revenue_metrics():\n    try:\n        # Step 1: Authenticate user to get access token\n        login_payload = {\n            \"email\": USERNAME,\n            \"password\": PASSWORD\n        }\n        login_response = requests.post(LOGIN_ENDPOINT, json=login_payload, timeout=TIMEOUT)\n        assert login_response.status_code == 200, f\"Login failed with status {login_response.status_code}\"\n        login_data = login_response.json()\n        assert \"access_token\" in login_data, \"access_token not found in login response\"\n        assert \"refresh_token\" in login_data, \"refresh_token not found in login response\"\n        access_token = login_data[\"access_token\"]\n\n        # Step 2: Use access token to authorize GET /total-revenue/\n        headers = {\n            \"Authorization\": f\"Bearer {access_token}\",\n            \"Accept\": \"application/json\"\n        }\n        response = requests.get(TOTAL_REVENUE_ENDPOINT, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status 200 but got {response.status_code}\"\n        resp_json = response.json()\n\n        # Validate response structure and fields\n        assert isinstance(resp_json, dict), \"Response is not a JSON object\"\n        assert \"status\" in resp_json, \"'status' field missing in response\"\n        assert resp_json[\"status\"] == \"success\", f\"Unexpected status value: {resp_json['status']}\"\n        assert \"data\" in resp_json, \"'data' field missing in response\"\n        data = resp_json[\"data\"]\n        assert isinstance(data, dict), \"'data' field is not an object\"\n        assert \"total_revenue\" in data, \"'total_revenue' missing in data\"\n        assert isinstance(data[\"total_revenue\"], (int, float)), \"'total_revenue' is not a number\"\n        assert \"change_percentage\" in data, \"'change_percentage' missing in data\"\n        assert isinstance(data[\"change_percentage\"], (int, float)), \"'change_percentage' is not a number\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed with exception: {e}\"\n\ntest_get_total_revenue_metrics()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 48, in <module>\n  File \"<string>\", line 21, in test_get_total_revenue_metrics\nAssertionError: access_token not found in login response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-10T04:12:03.104Z",
    "modified": "2025-10-10T04:13:03.456Z"
  }
]
